I"Å,<h2 id="4-median-of-two-sorted-arrays">4. Median of Two Sorted Arrays</h2>
<p>Given two sorted arrays nums1 and nums2 of size m and n respectively.</p>

<p>Return the median of the two sorted arrays.</p>

<p>Follow up: The overall run time complexity should be O(log (m+n)).</p>

<p>Example:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000

Input: nums1 = [], nums2 = [1]
Output: 1.00000

Input: nums1 = [2], nums2 = []
Output: 2.00000

</pre></td></tr></tbody></table></code></pre></div></div>

<!-- **Note**: -->

<p><strong>Constraints</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>nums1,length == m
nums2,length == n
0 &lt;= m &lt;= 1000
0 &lt;= n &lt;= 1000
1 &lt;= m + n &lt;= 2000
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="solution-1"><em>Solution 1</em></h3>
<p><strong><em>Thinking</em></strong>: If no time cmoplexity constraint, apply <strong>Merge Sort</strong> to get the K-th element.</p>

<p>Time Complexity: $O(m + n)$</p>

<p>Space Complexity: $O(1)$</p>

<h3 id="solution-2"><em>Solution 2</em></h3>
<p><strong><em>Thinking</em></strong>: <strong>Binary Search</strong> - eliminate half each recursion.</p>

<p>Time Complexity: $O(log(m + n))$</p>

<p>Space Complexity: $O(1)$</p>

<h3 id="accepted"><font color="green">Accepted</font></h3>
<p>Runtime: $&lt; 25.13\%$</p>

<p>Memory Usage: $&lt; 24.05\%$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMedianSortedArrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">nums2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        
        <span class="n">len1</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums1</span><span class="p">)</span>
        <span class="n">len2</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums2</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">len1</span> <span class="o">+</span> <span class="n">len2</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">len1</span> <span class="o">+</span> <span class="n">len2</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">findKth</span><span class="p">(</span><span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">findKth</span><span class="p">(</span><span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="k">else</span><span class="p">:</span> <span class="c1"># (len1 + len2) % 2 == 1:
</span>            <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">len1</span> <span class="o">+</span> <span class="n">len2</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">findKth</span><span class="p">(</span><span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
            
            
    
    <span class="k">def</span> <span class="nf">findKth</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">nums2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">K</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"nums1: "</span><span class="p">,</span> <span class="n">nums1</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"nums2: "</span><span class="p">,</span> <span class="n">nums2</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"K: "</span><span class="p">,</span> <span class="n">K</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="n">nums1</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">nums2</span><span class="p">[</span><span class="n">K</span><span class="p">]</span>
        <span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="n">nums2</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">nums1</span><span class="p">[</span><span class="n">K</span><span class="p">]</span>
        
        <span class="n">mid_idx1</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="n">mid_idx2</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums2</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        
        <span class="k">if</span> <span class="n">K</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">mid_idx1</span> <span class="o">+</span> <span class="n">mid_idx2</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">nums1</span><span class="p">[</span><span class="n">mid_idx1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums2</span><span class="p">[</span><span class="n">mid_idx2</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">findKth</span><span class="p">(</span><span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">[</span><span class="n">mid_idx2</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:</span> <span class="p">],</span> <span class="n">K</span> <span class="o">-</span> <span class="n">mid_idx2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">findKth</span><span class="p">(</span><span class="n">nums1</span><span class="p">[</span><span class="n">mid_idx1</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:</span> <span class="p">],</span> <span class="n">nums2</span><span class="p">,</span> <span class="n">K</span> <span class="o">-</span> <span class="n">mid_idx1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">nums1</span><span class="p">[</span><span class="n">mid_idx1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums2</span><span class="p">[</span><span class="n">mid_idx2</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">findKth</span><span class="p">(</span><span class="n">nums1</span><span class="p">[</span> <span class="p">:</span> <span class="n">mid_idx1</span><span class="p">],</span> <span class="n">nums2</span><span class="p">,</span> <span class="n">K</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">findKth</span><span class="p">(</span><span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">[</span> <span class="p">:</span> <span class="n">mid_idx2</span><span class="p">],</span> <span class="n">K</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="notes">Notes:</h3>
<ol>
  <li>Need to check the remain subarrays <strong>length</strong> with the <strong>K</strong>, check if <code class="language-plaintext highlighter-rouge">K &lt; (mid_idx1 + mid_idx2)</code>, remove the last half and still look for the <strong>K-th</strong>. Otherwise, if <code class="language-plaintext highlighter-rouge">K &gt;= (mid_idx1 + mid_idx2)</code>, remove the first half and change to look for the <strong>K - mid_idx? - 1</strong> element in the remain arrays.</li>
  <li>Then check the medians of the two arrays, <code class="language-plaintext highlighter-rouge">nums1[mid_idx1], nums2[mid_idx2]</code>.</li>
</ol>
:ET