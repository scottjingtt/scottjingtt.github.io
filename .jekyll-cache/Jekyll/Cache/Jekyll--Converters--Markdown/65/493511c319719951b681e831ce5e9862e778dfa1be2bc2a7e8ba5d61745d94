I"e<h2 id="125-valid-palindrome">125. Valid Palindrome</h2>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>

<p><strong>Note</strong>: For the purpose of this problem, we define empty string as valid palindrome.</p>

<p>Example:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>Input: "A man, a plan, a canal: Panama"
Output: true

Input: "race a car"
Output: false
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Constraints</strong>:</p>

<ul>
  <li>s consists only of printable ASCII characters.</li>
</ul>

<h3 id="solution-1"><em>Solution 1</em></h3>
<p><strong><em>Thinking</em></strong>: Find the middle and dicide the start left/right indexes, then compare all LEFT and RIGHT characters until the end of the string</p>

<p>Time Complexity: $O(n)$</p>

<p>Space Complexity: $O(n)$</p>

<h3 id="accepted"><font color="green">Accepted</font></h3>
<p>Runtime: $&lt; 81.61\%$</p>

<p>Memory Usage: $&lt; 94.00\%$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">s</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="c1"># Remove space and other symbols, only keep lower case alphabats
</span>        <span class="n">new_alpha</span> <span class="o">=</span> <span class="s">''</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">c</span><span class="p">.</span><span class="n">isalnum</span><span class="p">():</span>   <span class="c1">#string.isalpha(),  string.isalnum()
</span>                <span class="n">new_alpha</span> <span class="o">=</span> <span class="n">new_alpha</span> <span class="o">+</span> <span class="n">c</span>
        <span class="k">print</span><span class="p">(</span><span class="n">new_alpha</span><span class="p">)</span>
        
        <span class="c1"># find middle c, and left &amp; right start idx
</span>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_alpha</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">left_idx</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_alpha</span><span class="p">)</span> <span class="o">//</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="n">right_idx</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_alpha</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">mid_idx</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_alpha</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">left_idx</span> <span class="o">=</span> <span class="n">mid_idx</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="n">right_idx</span> <span class="o">=</span> <span class="n">mid_idx</span> <span class="o">+</span> <span class="mi">1</span>
        
        <span class="c1"># check if palindrome
</span>        <span class="k">while</span> <span class="n">left_idx</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">right_idx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_alpha</span><span class="p">):</span>
            <span class="c1"># print(left_idx, right_idx, new_alpha[left_idx], new_alpha[right_idx])
</span>            <span class="k">if</span> <span class="n">new_alpha</span><span class="p">[</span><span class="n">left_idx</span><span class="p">]</span> <span class="o">==</span> <span class="n">new_alpha</span><span class="p">[</span><span class="n">right_idx</span><span class="p">]:</span>
                <span class="n">left_idx</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">right_idx</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        
        <span class="k">return</span> <span class="bp">True</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="notes">Notes:</h3>
<ol>
  <li>
    <p>Cleasing the string:<br />
 string.isalpha(): check if is alpha character</p>

    <p>string.isalnum(): check if is alpha or number (alphnumeric)</p>
  </li>
  <li>
    <p>Be carefull!!! Use the new alphanumeric only string! instead of the input string</p>
  </li>
</ol>
:ET